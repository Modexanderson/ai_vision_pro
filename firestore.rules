// firestore.rules - SECURE FIRESTORE RULES FOR SUBSCRIPTION DATA

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Subscription collection - users can only access their own subscription
    match /subscriptions/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User-specific collections
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Detection history - user can only access their own
      match /detection_history/{historyId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Favorites - user can only access their own
      match /favorites/{favoriteId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // User settings and preferences
      match /settings/{settingId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // App-wide analytics (read-only for users, write for functions)
    match /analytics/{document=**} {
      allow read: if request.auth != null;
      allow write: if false; // Only server functions can write
    }
    
    // Public app configuration (read-only)
    match /app_config/{document} {
      allow read: if true;
      allow write: if false; // Only admins via console
    }
    
    // Premium features catalog (read-only)
    match /premium_features/{document} {
      allow read: if true;
      allow write: if false; // Only admins via console
    }
    
    // Validation functions
    function isValidSubscription(data) {
      return data.keys().hasAll(['userId', 'productId', 'transactionId', 'purchaseDate', 'isActive', 'platform'])
        && data.userId is string
        && data.productId is string
        && data.transactionId is string
        && data.purchaseDate is timestamp
        && data.isActive is bool
        && data.platform in ['ios', 'android'];
    }
    
    function isValidDetectionHistory(data) {
      return data.keys().hasAll(['id', 'imagePath', 'detectedObjects', 'averageConfidence', 'timestamp'])
        && data.id is string
        && data.imagePath is string
        && data.detectedObjects is list
        && data.averageConfidence is number
        && data.timestamp is timestamp;
    }
  }
}